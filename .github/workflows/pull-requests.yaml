name: Tests
'on':
  pull_request:
    branches:
      - main
env:
  DOCKER_BUILDKIT: 1
jobs:
  lint-unit-tests:
    name: Lint and Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: >-
            ${{ runner.os }}-tests-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml')
            }}
          restore-keys: |
            ${{ runner.os }}-tests-pnpm-store-
      - name: Setup pnpm
        uses: pnpm/action-setup@v1.2.1
        with:
          version: 5.17.2
      - run: echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-tests-node-modules-${{ github.sha }}
      - name: Fetch target branch
        run: >-
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{
          github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
      - run: pnpm i --frozen-lockfile
      - run: .scripts/ci/run-lint.ts
      - run: .scripts/ci/run-tests.ts unit
  build:
    name: 'Apps: docker build'
    runs-on: ubuntu-20.04
    needs:
      - lint-unit-tests
    strategy:
      matrix:
        include:
          - name: web-api
            package-name: '@my/web-api'
            path: apps/web-api
          - name: internal-api
            package-name: '@my/internal-api'
            path: apps/internal-api
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: >-
            ${{ runner.os }}-tests-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml')
            }}
          restore-keys: |
            ${{ runner.os }}-tests-pnpm-store-
      - name: Setup pnpm
        uses: pnpm/action-setup@v1.2.1
        with:
          version: 5.17.2
      - run: echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-tests-node-modules-${{ github.sha }}
      - name: Fetch target branch
        run: >-
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{
          github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Docker login
        run: >-
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u rhyek
          --password-stdin
      - name: Set image name
        run: >-
          echo "IMAGE=ghcr.io/$GITHUB_REPOSITORY-${{ env.GITHUB_BASE_REF_SLUG
          }}-${{ matrix.name }}" >> $GITHUB_ENV
      - name: Should build docker image?
        id: needs-build
        run: |
          NEEDS_BUILD=$(.scripts/ci/needs-build.ts ${{ matrix.package-name }})
          if [ "$NEEDS_BUILD" == "false" ]; then
            docker manifest inspect ${{ env.IMAGE }}:latest > /dev/null
            if [ $? == "1" ]; then
              NEEDS_BUILD="true"
            fi
          fi
          echo "::set-output name=result::$NEEDS_BUILD"
      - name: Build docker image
        if: ${{ steps.needs-build.outputs.result == 'true' }}
        run: >
          .scripts/ci/make-dedicated-lockfile.ts ${{ matrix.package-name }}
          --replace

          docker build \
            -t ${{ env.IMAGE }}:${{ github.sha }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=${{ env.IMAGE }}:latest \
            -f ${{ matrix.path }}/Dockerfile \
            .
          docker push ${{ env.IMAGE }}:${{ github.sha }}
  integration-tests:
    name: 'Apps: integration tests'
    runs-on: ubuntu-20.04
    needs:
      - build
    strategy:
      matrix:
        include:
          - name: web-api
            package-name: '@my/web-api'
            path: apps/web-api
            deps: internal-api
          - name: internal-api
            package-name: '@my/internal-api'
            path: apps/internal-api
    steps:
      - uses: actions/checkout@v2
      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: >-
            ${{ runner.os }}-tests-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml')
            }}
          restore-keys: |
            ${{ runner.os }}-tests-pnpm-store-
      - name: Setup pnpm
        uses: pnpm/action-setup@v1.2.1
        with:
          version: 5.17.2
      - run: echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-tests-node-modules-${{ github.sha }}
      - name: Fetch target branch
        run: >-
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{
          github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Should run tests?
        id: should-run
        run: >
          SUT_CHANGED=$(.scripts/ci/needs-build.ts ${{ matrix.package-name }})

          echo "SUT needs build: $SUT_CHANGED"

          DEPS=${{ matrix.deps }}

          ANY_DEP_CHANGED=false

          if [ -z "$DEPS" ]; then
            COMPOSE_FILE=${{ matrix.path }}/test/docker-compose.ci.yaml
            touch $COMPOSE_FILE
            echo 'services:' >> $COMPOSE_FILE
            IFS=',' read -ra ARR <<< "$DEPS"
            for DEP in "${ARR[@]}"; do
              IMAGE="ghcr.io/$GITHUB_REPOSITORY-${{ env.GITHUB_BASE_REF_SLUG }}-$DEP"
              docker manifest inspect $IMAGE:{{ github.sha }} > /dev/null
              if [ $? == "0" ]; then
                DEP_CHANGED=true
                ANY_DEP_CHANGED=true
                TAG=${{ github.sha }}
              else
                DEP_CHANGED=false
                TAG=latest
              fi
              echo "$DEP changed: $DEP_CHANGED"
              IMAGE_AND_TAG="$IMAGE:$TAG"
              echo "  $DEP:" >> $COMPOSE_FILE
              echo "    image: $IMAGE_AND_TAG" >> $COMPOSE_FILE
            done
            cat $COMPOSE_FILE
          fi

          SHOULD_RUN=false

          if [ "$SUT_CHANGED" = "true" ] || [ "$ANY_DEP_CHANGED" = "true" ];
          then
            SHOULD_RUN=true
          fi

          echo "::set-output name=result::$SHOULD_RUN"
      - name: Run integration tests
        if: ${{ steps.should-run.outputs.result == 'true' }}
        run: pnpm test:e2e --filter '${{ matrix.package-name }}'
