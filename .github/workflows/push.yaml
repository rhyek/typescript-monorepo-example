name: Build and Deploy
'on':
  push:
    branches:
      - main
env:
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  WEB_API_APP: typescript-monorepo
jobs:
  pr-number:
    name: PR SHA
    runs-on: ubuntu-20.04
    outputs:
      result: ${{ steps.pr-number.outputs.result }}
    steps:
      - name: Get PR SHA
        id: pr-number
        run: |
          SHA=$(curl \
            -s \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'accept: application/vnd.github.groot-preview+json' \
            GET 'https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls' \
            | jq -rM '.[0].number' 2> /dev/null \
            || echo null
          )
          echo "::set-output name=result::$SHA"
  publish:
    name: Publish images
    runs-on: ubuntu-20.04
    needs: pr-number
    if: steps.pr-number.outputs.result != 'null'
    strategy:
      matrix:
        include:
          - name: web-api
            heroku_app_key: WEB_API_APP
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Set GHCR.io image name
        id: ghcr-image-name
        run: >-
          echo "::set-output name=result::ghcr.io/${{ github.repository }}-${{
          env.GITHUB_REF_SLUG }}-${{ matrix.name }}"
      - name: Set Heroku image name
        id: heroku-image-name
        run: >-
          echo "::set-output name=result::registry.heroku.com/${{
          env[matrix.heroku_app_key] }}/web"
      - name: Docker login
        run: >-
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u rhyek
          --password-stdin
      - id: image-pulled
        run: >
          docker pull ${{ steps.ghcr-image-name.outputs.result }}:${{
          needs.pr-number.outputs.result }} && EXIT_CODE=0 || EXIT_CODE=$?

          RESULT=$([ $EXIT_CODE = 0 ] && echo 'true' || echo 'false')

          echo "::set-output name=result::$RESULT"
      - name: Tag and push to heroku
        if: steps.image-pulled.outputs.result == 'true'
        run: >
          docker login --username=_ --password=${{ env.HEROKU_API_KEY }}
          registry.heroku.com

          docker tag ${{ steps.ghcr-image-name.outputs.result }}:${{
          needs.pr-number.outputs.result }} ${{
          steps.heroku-image-name.outputs.result }}

          docker push ${{ steps.heroku-image-name.outputs.result }}
      - name: Tag latest and push to ghcr
        if: steps.image-pulled.outputs.result == 'true'
        run: >
          docker tag ${{ steps.ghcr-image-name.outputs.result }}:${{
          needs.pr-number.outputs.result }} ${{
          steps.ghcr-image-name.outputs.result }}:latest

          docker push ${{ steps.ghcr-image-name.outputs.result }}:latest
  deploy:
    name: Deploy apps
    runs-on: ubuntu-20.04
    needs: publish
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 14.15.4
      - run: curl -s https://cli-assets.heroku.com/install.sh | sh
      - run: heroku container:login
      - run: heroku container:release web --app=$WEB_API_APP
