name: Delete images for closed PRs
'on':
  pull_request:
    branches:
      - main
    types:
      - closed
env:
  PACKAGES_PATH_PREFIX: user
jobs:
  delete-unused-images:
    name: Delete unused image tags
    runs-on: ubuntu-20.04
    if: github.event.pull_request.merged == false
    strategy:
      matrix:
        name:
          - web-api
          - internal-api
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Delete PR image if exists
        run: >
          DOCKER_TOKEN=${{ secrets.DOCKER_TOKEN }}

          PACKAGES_PATH_PREFIX=${{ env.PACKAGES_PATH_PREFIX }}

          PACKAGE_NAME=${{ env.GITHUB_REPOSITORY_NAME_PART }}-${{
          env.GITHUB_BASE_REF_SLUG }}-${{ matrix.name }}

          PR_NUMBER=${{ github.event.pull_request.number }}


          # https://stackoverflow.com/a/9894126/410224

          trap "exit 1" TERM

          export TOP_PID=$$


          get_image_id () {
            local PACKAGE_NAME=$1
            local TAG=$2

            code=$(curl -s \
              --output out.txt \
              --write-out "%{http_code}" \
              -H "Authorization: Bearer $DOCKER_TOKEN" \
              -H 'Accept: application/vnd.github.v3+json' \
              "https://api.github.com/$PACKAGES_PATH_PREFIX/packages/container/$PACKAGE_NAME/versions"
            )
            if [ $code -eq 200 ]; then
              cat out.txt | jq -rM "first(.[] | select(.metadata.container.tags | index(\"$TAG\"))).id // null"
            else
              if [ $code -eq 404 ]; then
                echo 'null'
                return 0
              else
                cat out.txt
                kill -s TERM $TOP_PID
              fi
            fi
          }


          delete_image () {
            local PACKAGE_NAME=$1
            local IMAGE_ID=$2

            curl -i \
              -X DELETE \
              -H "Authorization: Bearer $DOCKER_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/$PACKAGES_PATH_PREFIX/packages/container/$PACKAGE_NAME/versions/$IMAGE_ID"
          }


          find_and_delete_image () {
            local PACKAGE_NAME=$1
            local TAG=$2

            IMAGE_ID=$(get_image_id $PACKAGE_NAME $TAG)
            if [ "$IMAGE_ID" != 'null' ]; then
              delete_image $PACKAGE_NAME $IMAGE_ID
              echo "Deleted $PACKAGE_NAME:$TAG with image id $IMAGE_ID"
            else
              echo "Image $PACKAGE_NAME:$TAG not found"
            fi
          }


          find_and_delete_image $PACKAGE_NAME $PR_NUMBER

          find_and_delete_image "${PACKAGE_NAME}-cache" $PR_NUMBER
