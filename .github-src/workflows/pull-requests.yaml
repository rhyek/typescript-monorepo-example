name: Tests

on:
  pull_request:
    branches:
      - main

anchors:
  test-setup: &test-setup
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14.15.4'
    - name: Set global npm folder
      run: |
        mkdir ~/.npm-global
        npm config set prefix '~/.npm-global'
        echo "$HOME/.npm-global/bin" >> $GITHUB_PATH
    - name: Cache npm global folder
      id: cache-npm-global
      uses: actions/cache@v2
      with:
        path: ~/.npm-global
        key: ${{ runner.os }}-tests-npm-global
    - name: Install global node packages
      if: steps.cache-npm-global.outputs.cache-hit != 'true'
      run: |
        npm i -g pnpm
  node-modules-cache: &node-modules-cache
    uses: actions/cache@v2
    with:
      path: '**/node_modules'
      key: ${{ runner.os }}-tests-node-modules-${{ github.sha }}

jobs:
  pre-test:
    name: Pre-test
    runs-on: ubuntu-20.04
    steps:
      - *test-setup
      - name: Cache pnpm store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-tests-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-tests-pnpm-store-
      - <<: *node-modules-cache
      - run: pnpm i --frozen-lockfile
      - run: echo $GITHUB_SHA
  test-libs:
    name: Test libs
    runs-on: ubuntu-20.04
    needs: [pre-test]
    strategy:
      matrix:
        path: [src/lib]
    defaults:
      run:
        working-directory: ${{ matrix.path }}
    steps:
      - *test-setup
      - <<: *node-modules-cache
      - run: pnpm lint
      - run: pnpm test:unit
  apps-unit-tests-and-build:
    name: 'Apps: unit tests and build'
    runs-on: ubuntu-20.04
    needs: [pre-test]
    strategy:
      matrix:
        include:
          - app-name: web-api
            path: src/web-api
    defaults:
      run:
        working-directory: ${{ matrix.path }}
    steps:
      - *test-setup
      - <<: *node-modules-cache
      - run: pnpm lint
      - run: pnpm test:unit
      - name: Docker login
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
      - run: echo "IMAGE=docker.pkg.github.com/$GITHUB_REPOSITORY-${{ matrix.app-name }}" >> $GITHUB_ENV
      - uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Build docker image
        run: |
          docker build \
            -t ${{ env.IMAGE }}:${{ github.sha }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=${{ env.IMAGE }}:latest \
            --cache-from=${{ env.IMAGE }}:${{ github.sha }} \
            -f ./Dockerfile \
            ../../
      - run: docker push ${{ env.IMAGE }}:${{ github.sha }}
  apps-integration-tests:
    name: 'Apps: integration tests'
    runs-on: ubuntu-20.04
    needs: [apps-unit-tests-and-build]
    strategy:
      matrix:
        include:
          - app-name: web-api
            path: src/web-api
    defaults:
      run:
        working-directory: ${{ matrix.path }}
    steps:
      - *test-setup
      - <<: *node-modules-cache
      - run: pnpm:e2e
