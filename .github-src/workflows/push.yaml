name: Publish and Deploy

on:
  push:
    branches:
      - main
env:
  !include(../includes/envs)
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  WEB_API_APP: typescript-monorepo

anchors:
  !include(../includes/common-anchors)
  report: &report
    name: Slack Notification
    uses: rtCamp/action-slack-notify@v2
    if: cancelled() || failure()
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SLACK_USERNAME: github-actions
      SLACK_COLOR: ${{ job.status == 'success' && 'good' || job.status == 'cancelled' && '#808080' || 'danger' }}
  heroku-docker-login: &heroku-docker-login
    name: Heroku Docker login
    run: echo ${{ secrets.HEROKU_API_KEY }} | docker login registry.heroku.com --username=_ --password-stdin

jobs:
  pr-number:
    name: Get PR number
    runs-on: ubuntu-20.04
    outputs:
      result: ${{ steps.pr-number.outputs.result }}
    steps:
      - name: Get PR number
        id: pr-number
        run: |
          NUMBER=$(curl \
            -s \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'accept: application/vnd.github.groot-preview+json' \
            'https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls' \
            | jq -rM '.[0].number' 2> /dev/null \
            || echo null
          )
          echo "::set-output name=result::$NUMBER"

  pnpm-store-cache: # https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
    name: Create pnpm store cache for future PRs
    runs-on: ubuntu-20.04
    needs: pr-number
    if: needs.pr-number.outputs.result != 'null'
    steps:
      - uses: actions/checkout@v2
      - <<: *pnpm-store-cache
      - *setup-pnpm
      - run: pnpm i --frozen-lockfile

  publish-for-pr:
    name: Publish images for merged PR
    runs-on: ubuntu-20.04
    needs: pr-number
    if: needs.pr-number.outputs.result != 'null'
    strategy:
      matrix:
        include:
          - name: web-api
            heroku_app_key: WEB_API_APP
          - name: internal-api
    steps:
      - *setup-node
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Set image names
        id: image-names
        run: |
          echo "::set-output name=github::${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}-${{ env.GITHUB_BASE_REF_SLUG }}-${{ matrix.name }}"
          echo "::set-output name=heroku::registry.heroku.com/${{ env[matrix.heroku_app_key] }}/web"
      - <<: *docker-login
      - name: Check if image for PR exists
        id: image-exists
        run: |
          docker pull ${{ steps.image-names.outputs.github }}:${{ needs.pr-number.outputs.result }} && EXIT_CODE=0 || EXIT_CODE=$?
          RESULT=$([ $EXIT_CODE = 0 ] && echo 'true' || echo 'false')
          echo "::set-output name=result::$RESULT"
      - <<: *heroku-docker-login
        if: steps.image-exists.outputs.result == 'true' && matrix.heroku_app_key != ''
      - name: Tag and push to heroku
        if: steps.image-exists.outputs.result == 'true' && matrix.heroku_app_key != ''
        run: |
          docker tag ${{ steps.image-names.outputs.github }}:${{ needs.pr-number.outputs.result }} ${{ steps.image-names.outputs.heroku }}
          docker push ${{ steps.image-names.outputs.heroku }}
      - name: Tag 'latest' and push to ghcr
        id: push-to-ghcr
        if: steps.image-exists.outputs.result == 'true'
        run: |
          DOCKER_TOKEN=${{ env.DOCKER_TOKEN }}
          IMAGE_NAME=${{ steps.image-names.outputs.github }}
          PACKAGES_PATH_PREFIX=${{ env.PACKAGES_PATH_PREFIX }}
          PACKAGE_NAME=${{ env.GITHUB_REPOSITORY_NAME_PART }}-${{ env.GITHUB_REF_SLUG }}-${{ matrix.name }}
          PR_NUMBER=${{ needs.pr-number.outputs.result }}

          !include(../includes/image_helpers.sh)

          re_tag_and_delete_old () {
            local IMAGE_NAME=$1
            local PACKAGE_NAME=$2
            local TAG=$3

            docker buildx imagetools inspect "$IMAGE_NAME:$TAG" &> /dev/null && EXIT_CODE=0 || EXIT_CODE=$?

            if [ $EXIT_CODE = 0 ]; then
              BUILT_IMAGE_ID=$(get_image_id $PACKAGE_NAME $TAG)
              OLD_LATEST_IMAGE_ID=$(get_image_id $PACKAGE_NAME 'latest')

              docker buildx imagetools create -t "$IMAGE_NAME:latest" "$IMAGE_NAME:$TAG"

              NEW_LATEST_IMAGE_ID=$(get_image_id $PACKAGE_NAME 'latest')
              if [ "$BUILT_IMAGE_ID" != 'null' ] && [ "$BUILT_IMAGE_ID" != "$NEW_LATEST_IMAGE_ID" ]; then
                delete_image $PACKAGE_NAME $BUILT_IMAGE_ID
                echo "Deleted old image with id $BUILT_IMAGE_ID"
              fi
              if [ "$OLD_LATEST_IMAGE_ID" != 'null' ] && [ "$OLD_LATEST_IMAGE_ID" != "$NEW_LATEST_IMAGE_ID" ]; then
                delete_image $PACKAGE_NAME $OLD_LATEST_IMAGE_ID
                echo "Deleted old latest image with id $OLD_LATEST_IMAGE_ID"
              fi
            fi
          }

          re_tag_and_delete_old $IMAGE_NAME $PACKAGE_NAME $PR_NUMBER
          re_tag_and_delete_old "${IMAGE_NAME}-cache" "${PACKAGE_NAME}-cache" $PR_NUMBER
      - <<: *report
  publish-for-push:
    name: Publish images for direct push
    runs-on: ubuntu-20.04
    needs: pr-number
    if: needs.pr-number.outputs.result == 'null'
    strategy:
      matrix:
        include:
          - name: web-api
            heroku_app_key: WEB_API_APP
            package-name: '@my/web-api'
            path: apps/web-api
    steps:
      - uses: actions/checkout@v2
      - <<: *pnpm-store-cache
      - *setup-pnpm
      - run: pnpm i --frozen-lockfile
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - <<: *docker-login
      - <<: *heroku-docker-login
      - name: Set image names
        id: image-names
        run: |
          echo "::set-output name=github::ghcr.io/${{ github.repository }}-${{ env.GITHUB_REF_SLUG }}-${{ matrix.name }}"
          echo "::set-output name=heroku::registry.heroku.com/${{ env[matrix.heroku_app_key] }}/web"
      - uses: docker/setup-buildx-action@v1
      - name: Build and Push docker image
        run: |
          .scripts/make-dedicated-lockfile.ts ${{ matrix.package-name }} --replace
          docker -v
          docker buildx version
          docker buildx build \
            --cache-from=${{ steps.image-names.outputs.github }}:latest \
            --cache-to=type=inline \
            -t ${{ steps.image-names.outputs.github }}:latest \
            -t ${{ steps.image-names.outputs.heroku }} \
            -f ${{ matrix.path }}/Dockerfile \
            --push \
            .
      - <<: *report
  deploy:
    name: Deploy apps
    runs-on: ubuntu-20.04
    needs: [publish-for-pr, publish-for-push]
    if: always() && (needs.publish-for-pr.result == 'success' || needs.publish-for-push.result == 'success')
    steps:
      - *setup-node
      - run: curl -s https://cli-assets.heroku.com/install.sh | sh
      - run: heroku container:login
      - run: heroku container:release web --app=$WEB_API_APP
      - <<: *report
        if: always()
