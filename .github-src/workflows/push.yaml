name: Publish and Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_BUILDKIT: 1
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  WEB_API_APP: typescript-monorepo

anchors:
  !include(../includes/common-anchors.yaml)
  report: &report
    name: Slack Notification
    uses: rtCamp/action-slack-notify@v2
    if: cancelled() || failure()
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SLACK_USERNAME: github-actions
      SLACK_COLOR: ${{ job.status == 'success' && 'good' || job.status == 'cancelled' && '#808080' || 'danger' }}

jobs:
  pr-number:
    name: Get PR number
    runs-on: ubuntu-20.04
    outputs:
      result: ${{ steps.pr-number.outputs.result }}
    steps:
      - name: Get PR number
        id: pr-number
        run: |
          NUMBER=$(curl \
            -s \
            -H 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H 'accept: application/vnd.github.groot-preview+json' \
            'https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/pulls' \
            | jq -rM '.[0].number' 2> /dev/null \
            || echo null
          )
          echo "::set-output name=result::$NUMBER"
  publish-for-pr:
    name: Publish images for merged PR
    runs-on: ubuntu-20.04
    needs: pr-number
    if: needs.pr-number.outputs.result != 'null'
    strategy:
      matrix:
        include:
          - name: web-api
            heroku_app_key: WEB_API_APP
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Set GHCR.io image name
        id: ghcr-image-name
        run: echo "::set-output name=result::ghcr.io/${{ github.repository }}-${{ env.GITHUB_REF_SLUG }}-${{ matrix.name }}"
      - name: Set Heroku image name
        id: heroku-image-name
        run: echo "::set-output name=result::registry.heroku.com/${{ env[matrix.heroku_app_key] }}/web"
      - <<: *docker-login
      - name: Check if image for PR exists
        id: image-exists
        run: |
          docker pull ${{ steps.ghcr-image-name.outputs.result }}:${{ needs.pr-number.outputs.result }} && EXIT_CODE=0 || EXIT_CODE=$?
          RESULT=$([ $EXIT_CODE = 0 ] && echo 'true' || echo 'false')
          echo "::set-output name=result::$RESULT"
      - name: Tag and push to heroku
        if: steps.image-exists.outputs.result == 'true'
        run: |
          docker login --username=_ --password=${{ env.HEROKU_API_KEY }} registry.heroku.com
          docker tag ${{ steps.ghcr-image-name.outputs.result }}:${{ needs.pr-number.outputs.result }} ${{ steps.heroku-image-name.outputs.result }}
          docker push ${{ steps.heroku-image-name.outputs.result }}
      - name: Tag latest and push to ghcr
        if: steps.image-exists.outputs.result == 'true'
        run: |
          docker tag ${{ steps.ghcr-image-name.outputs.result }}:${{ needs.pr-number.outputs.result }} ${{ steps.ghcr-image-name.outputs.result }}:latest
          docker push ${{ steps.ghcr-image-name.outputs.result }}:latest
      - name: Delete PR image
        if: steps.image-exists.outputs.result == 'true'
        run: |
          PACKAGE_NAME=${{ env.GITHUB_REPOSITORY_NAME_PART }}-${{ env.GITHUB_REF_SLUG }}-${{ matrix.name }}
          IMAGE_ID=$(curl -s \
            -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions" \
            | jq '.[] | select(.metadata.container.tags[0] == "${{ needs.pr-number.outputs.result }}").id' 2> /dev/null \
            || echo null
          )
          if [ "$IMAGE_ID" != 'null' ]; then
            curl -i \
              -X DELETE \
              -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/packages/container/$PACKAGE_NAME/versions/$IMAGE_ID"
          fi
      - <<: *report
  publish-for-push:
    name: Publish images for direct push
    runs-on: ubuntu-20.04
    needs: pr-number
    if: needs.pr-number.outputs.result == 'null'
    strategy:
      matrix:
        include:
          - name: web-api
            heroku_app_key: WEB_API_APP
            package-name: '@my/web-api'
            path: apps/web-api
    steps:
      - uses: actions/checkout@v2
      - *setup-pnpm
      - run: pnpm i --frozen-lockfile
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - <<: *docker-login
      - name: Set GHCR.io image name
        id: ghcr-image-name
        run: echo "::set-output name=result::ghcr.io/${{ github.repository }}-${{ env.GITHUB_REF_SLUG }}-${{ matrix.name }}"
      - name: Set Heroku image name
        id: heroku-image-name
        run: echo "::set-output name=result::registry.heroku.com/${{ env[matrix.heroku_app_key] }}/web"
      - name: Build docker image
        run: |
          .scripts/ci/make-dedicated-lockfile.ts ${{ matrix.package-name }} --replace
          docker build \
            -t ${{ steps.ghcr-image-name.outputs.result }}:latest \
            -t ${{ steps.heroku-image-name.outputs.result }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=${{ steps.ghcr-image-name.outputs.result }}:latest \
            -f ${{ matrix.path }}/Dockerfile \
            .
      - name: Push to ghcr
        run: |
          docker push ${{ steps.ghcr-image-name.outputs.result }}:latest
      - name: Push to heroku
        run: |
          docker login --username=_ --password=${{ env.HEROKU_API_KEY }} registry.heroku.com
          docker push ${{ steps.heroku-image-name.outputs.result }}
      - <<: *report
  deploy:
    name: Deploy apps
    runs-on: ubuntu-20.04
    needs: [publish-for-pr, publish-for-push]
    if: always() && (needs.publish-for-pr.result == 'success' || needs.publish-for-push.result == 'success')
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: '14.15.4'
      - run: curl -s https://cli-assets.heroku.com/install.sh | sh
      - run: heroku container:login
      - run: heroku container:release web --app=$WEB_API_APP
      - <<: *report
        if: always()
# ## delete old image tag

# # does not currently work: https://github.community/t/deleting-a-package-version-for-a-container-on-ghcr-io-results-in-a-500-error/163549

# # curl -i \
# #   -X DELETE \
# #   -H 'Authorization: Bearer xxx' \
# #   -H "Accept: application/vnd.github.v3+json" \
# #   https://api.github.com/user/packages/container/typescript-monorepo-example-main-web-api/versions/15
