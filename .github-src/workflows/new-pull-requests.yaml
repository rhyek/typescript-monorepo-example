name: Tests and Build

on:
  pull_request:
    branches:
      - main

#prettier-ignore
env:
  !include(../includes/envs)

anchors:
  !include(../includes/common-anchors)
  node-modules-cache: &node-modules-cache
    name: Cache node_modules
    uses: actions/cache@v2
    with:
      path: '**/node_modules'
      key: ${{ runner.os }}-tests-node-modules-${{ github.sha }}
  fetch-target-branch: &fetch-target-branch
    name: Fetch target branch
    run: git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}

jobs:
  lint-unit-tests:
    name: Lint and Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - <<: *pnpm-store-cache
      - <<: *node-modules-cache
      - *setup-node
      - *setup-pnpm
      - <<: *fetch-target-branch
      - run: pnpm i --frozen-lockfile
      - run: .scripts/run-lint.ts
      - run: .scripts/run-tests.ts unit
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: [lint-unit-tests]
    strategy:
      matrix:
        include:
          - name: web-api
          - name: internal-api
    steps:
      - uses: actions/checkout@v2
      - <<: *node-modules-cache
      - *setup-node
      - *setup-pnpm
      - <<: *fetch-target-branch
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - <<: *docker-login
      - name: Set image name
        run: echo "IMAGE=$GITHUB_REPOSITORY_NAME_PART_SLUG-${{ env.GITHUB_BASE_REF_SLUG }}-${{ matrix.name }}" >> $GITHUB_ENV
      - name: Should build docker image?
        id: needs-build
        run: |
          NEEDS_BUILD=$(.scripts/ci/needs-build.ts ${{ matrix.name }} \
                        --repository ${{ env.DOCKER_REPOSITORY }} \
                        --image ${{ env.IMAGE }})
          echo "::set-output name=result::$NEEDS_BUILD"
      - uses: docker/setup-buildx-action@v1
        if: steps.needs-build.outputs.result == 'true'
      - name: Build docker image
        if: steps.needs-build.outputs.result == 'true'
        run: |
          docker -v
          docker buildx version

          .scripts/build-image.ts \
            --repository ${{ env.DOCKER_REPOSITORY }} \
            --image ${{ env.IMAGE }} \
            --tag ${{ github.event.pull_request.number }} \
            ${{ matrix.name }}
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-20.04
    needs: [build]
    strategy:
      matrix:
        include:
          - name: web-api
            deps: internal-api
          - name: internal-api
    steps:
      - uses: actions/checkout@v2
      - <<: *node-modules-cache
      - *setup-node
      - *setup-pnpm
      - <<: *fetch-target-branch
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - <<: *docker-login
      - name: Prepare e2e tests if needed
        id: prepare-e2e
        run: |
          PREPARED=$(.scripts/ci/prepare-e2e-if-needed.ts \
            --repository ${{ env.DOCKER_REPOSITORY }} \
            --image ${{ env.IMAGE }} \
            --tag ${{ github.event.pull_request.number }} \
            --deps ${{ matrix.deps }} \
             ${{ matrix.name }})
          echo "::set-output name=prepared::$PREPARED"
      - name: Run integration tests
        if: steps.prepare-e2e.outputs.prepared == 'true'
        run: pnpm test:e2e --filter {${{ matrix.name }}}
