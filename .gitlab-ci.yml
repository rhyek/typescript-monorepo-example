image: docker:19.03.12

services:
  - docker:19.03.12-dind

stages:
  - test
  - pre-deploy
  - deploy

before_script:
  - apk update
  - apk add --no-cache curl bash libgcc libstdc++
  - curl -OJs https://unofficial-builds.nodejs.org/download/release/v14.15.4/node-v14.15.4-linux-x64-musl.tar.xz
  - tar -xf node-v14.15.4-linux-x64-musl.tar.xz -C /opt
  - ln -s /opt/node-v14.15.4-linux-x64-musl/bin/node /usr/local/bin/node
  - ln -s /opt/node-v14.15.4-linux-x64-musl/bin/npm /usr/local/bin/npm
  - ln -s /opt/node-v14.15.4-linux-x64-musl/bin/npx /usr/local/bin/npx

.setup_heroku
  script:
    - curl https://cli-assets.heroku.com/install.sh | sh
    - heroku container:login

test_all:
  stage: test
  only:
    - merge_requests
  script:
    - apk add --no-cache docker-compose
    - npm i -g pnpm
    - pnpm i --frozen-lockfile
    - pnpm test
    - pnpm test:e2e

deploy_webapi:
  stage: deploy
  only:
    - main
  extends:
    - .setup_heroku
  script:
    - cd src/webapi
    - heroku container:push --app=typescript-monorepo --context-path ../../ web
    - heroku container:release web --app=typescript-monorepo
    # - docker build -f src/webapi/Dockerfile --iidfile imageid.txt -t registry.heroku.com/typescript-monorepo/webapi .
    # - docker login -u _ -p $HEROKU_TOKEN registry.heroku.com
    # - docker push registry.heroku.com/typescript-monorepo/webapi
    # - echo "Docker Image ID is $(cat imageid.txt)"
    # - |-
    #   curl -X PATCH https://api.heroku.com/apps/typescript-monorepo/formation --header "Content-Type: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-releases" --header "Authorization: Bearer ${HEROKU_TOKEN}" --data '{ "updates": [ { "type": "web", "docker_image": "'$(cat imageid.txt)'" } ] }'
